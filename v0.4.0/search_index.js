var documenterSearchIndex = {"docs":
[{"title":"API Reference","location":"api/#API-Reference","category":"section","text":"","page":"API Reference"},{"title":"API Reference","location":"api/","category":"page","text":"XLSXasJSON.JSONWorkbook\nXLSXasJSON.JSONWorksheet\nXLSXasJSON.merge\n","page":"API Reference"},{"title":"XLSXasJSON.JSONWorkbook","location":"api/#XLSXasJSON.JSONWorkbook","category":"type","text":"JSONWorkbook(file::AbstractString; start_line = 1)\n\nstart_line of each sheets are considered as JSONPointer for data structure.  And each sheets are pared to Array{OrderedDict, 1} \n\nConstructors\n\nJSONWorkbook(\"Example.xlsx\")\n\nArguments\n\narguments are applied to all Worksheets within Workbook.\n\nrow_oriented : if 'true'(the default) it will look for colum names in '1:1', if false it will look for colum names in 'A:A' \nstart_line : starting index of position of columnname.\nsqueeze : squeezes all rows of Worksheet to a singe row.\ndelim : a String or Regrex that of deliminator for converting single cell to array.\n\n\n\n\n\n","page":"API Reference"},{"title":"XLSXasJSON.JSONWorksheet","location":"api/#XLSXasJSON.JSONWorksheet","category":"type","text":"JSONWorksheet\n\nconstruct 'Array{OrderedDict, 1}' for each row from Worksheet\n\nConstructors\n\nJSONWorksheet(\"Example.xlsx\", \"Sheet1\")\nJSONWorksheet(\"Example.xlsx\", 1)\n\n\nArguments\n\nrow_oriented : if 'true'(the default) it will look for colum names in '1:1', if false it will look for colum names in 'A:A' \nstart_line : starting index of position of columnname.\nsqueeze : squeezes all rows of Worksheet to a singe row.\ndelim : a String or Regrex that of deliminator for converting single cell to array.\n\n\n\n\n\n","page":"API Reference"},{"title":"Base.merge","location":"api/#Base.merge","category":"function","text":"merge(a::JSONWorksheet, b::JSONWorksheet, bykey::AbstractString)\n\nConstruct a merged JSONWorksheet from the given JSONWorksheets. If the same Pointer is present in another collection, the value for that key will be the       value it has in the last collection listed.\n\n\n\n\n\n","page":"API Reference"},{"title":"XLSXasJSON.jl","location":"#XLSXasJSON.jl","category":"section","text":"","page":"Home"},{"title":"Introduction","location":"#Introduction","category":"section","text":"","page":"Home"},{"title":"Home","location":"","category":"page","text":"XLSXasJSON.jl is a Julia package to convert Excel spread sheet to json encoded file. Designated row or colum must be standardized JSONPointer token, ramaning rows will passed to json encoded file.","page":"Home"},{"title":"Home","location":"","category":"page","text":"You can read whole workbook, or specify sheet you want to read from Excel file. each rows on excel sheets are pared to Array{OrderedDict, 1} in Julia. ","page":"Home"},{"title":"Home","location":"","category":"page","text":"Please report bugs or make a feature request to opening an issue","page":"Home"},{"title":"Tutorial","location":"#Tutorial","category":"section","text":"","page":"Home"},{"title":"Home","location":"","category":"page","text":"Pages = [\"tutorial.md\"\n]\nDepth = 1","page":"Home"},{"title":"Tutorial","location":"tutorial/#Tutorial","category":"section","text":"","page":"Tutorial"},{"title":"Installation","location":"tutorial/#Installation","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"From a Julia session, run:","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"julia> using Pkg\njulia> Pkg.add(\"XLSXasJSON\")","page":"Tutorial"},{"title":"Usage Exmple","location":"tutorial/#Usage-Exmple","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"If you are familiar with a JSONPointer you can get start right away with example datas in the test.","page":"Tutorial"},{"title":"JSONWorkbook","location":"tutorial/#JSONWorkbook","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"By default, first rows of each sheets are considered as JSONPointer for data structure. And each sheets are pared to Array{OrderedDict, 1} ","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"    using XLSXasJSON\n\n    p = joinpath(dirname(pathof(XLSXasJSON)), \"../test/data\")\n    xf = joinpath(p, \"example.xlsx\")\n    jwb = JSONWorkbook(xf)","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"You can access worksheet via jwb[1] or jwb[\"sheetname\"]","page":"Tutorial"},{"title":"JSONWorksheet","location":"tutorial/#JSONWorksheet","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"    using XLSXasJSON\n\n    p = joinpath(dirname(pathof(XLSXasJSON)), \"../test/data\")\n    xf = joinpath(p, \"example.xlsx\")\n    jws = JSONWorksheet(xf, :Sheet1)","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"You can access rows of data with jws[1, :] ","page":"Tutorial"},{"title":"Writing JSON File","location":"tutorial/#Writing-JSON-File","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"    using XLSXasJSON\n\n    p = joinpath(dirname(pathof(XLSXasJSON)), \"../test/data\")\n    xf = joinpath(p, \"example.xlsx\")\n    jwb = JSONWorkbook(xf)\n\n    # Writing whole sheet\n    XLSXasJSON.write(pwd(), jwb)\n    # Writing singsheet\n    XLSXasJSON.write(\"Sheet1.json\", jwb[1]; indent = 2)","page":"Tutorial"},{"title":"Arguments","location":"tutorial/#Arguments","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"row_oriented : if 'true'(the default) it will look for colum names in '1:1', if false it will look for colum names in 'A:A' \nstart_line : starting index of position of columnname.\nsqueeze : squeezes all rows of Worksheet to a singe row.\ndelim : a String or Regrex that of deliminator for converting single cell to array.","page":"Tutorial"},{"title":"JSONPointer Exmples","location":"tutorial/#JSONPointer-Exmples","category":"section","text":"","page":"Tutorial"},{"title":"Basic","location":"tutorial/#Basic","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"A simple, row oriented key","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"/color\nred","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"produces","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"[{\n  \"color\": \"red\"\n}]","page":"Tutorial"},{"title":"Dict","location":"tutorial/#Dict","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"Nested names looks like:","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"/color/name color/value\nred #f00","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"and produces","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"[{\n  \"color\": {\n    \"name\": \"red\",\n    \"value\": \"#f00\"\n    }\n}]","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"It can has as many nests as you want","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"/a/b/c/d/e/f\nIt can be done","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"and produces","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"[{\n    \"a\": {\n      \"b\": {\n        \"c\": {\n          \"d\": {\n            \"e\": {\n              \"f\": \"It can be done\"\n            }\n          }\n        }\n      }\n    }\n  }]\n","page":"Tutorial"},{"title":"Array","location":"tutorial/#Array","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"Sometimes it's convinient to put array values in seperate column in XLSX ","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"/color/name color/rgb/1 color/rgb/2 color/rgb/3\nred 255 0 0","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"[{\n  \"color\": {\n    \"name\": \"red\",\n    \"rgb\": [255, 0, 0]\n    }\n}]","page":"Tutorial"},{"title":"Type Declarations","location":"tutorial/#Type-Declarations","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"You can declare Type with :: operator the same way as in Julia.","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"The value of array will be splitted with deliminator ';'.\nInstead Julia type, only JSON types can be used  ","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"/array::array /array_int::array{integer} /array_float::array{number}\n100;200;300 100;200;300 100;200;300","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"and produces","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"[{\n  \"array\": [\n    \"100\",\n    \"200\",\n    \"300\"\n  ],\n  \"array_int\": [\n    100,\n    200,\n    300\n  ],\n  \"array_float\": [\n    100.0,\n    200.0,\n    300.0\n  ]\n}]","page":"Tutorial"},{"title":"All of the above","location":"tutorial/#All-of-the-above","category":"section","text":"","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"Now you know all the rules necessary to create any json data structure you want with just a column name. This is a more complete row-oriented example:","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"/a/b /a/b2::array{integer} /a/b3/1,Type /a/b3/1/Amount /a/b3/2/Type /a/b3/2/Amount /a/b3/3/Type /a/b3/3/Amount::array\nFooood 100;200;300 Cake 50 Chocolate 19 Ingredient Salt;100","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"would produce","page":"Tutorial"},{"title":"Tutorial","location":"tutorial/","category":"page","text":"[\n  {\n    \"a\": {\n      \"b\": \"Fooood\",\n      \"b2\": [\n        100,\n        200,\n        300\n      ],\n      \"b3\": [\n        {\n          \"Type\": \"Cake\",\n          \"Amount\": 50\n        },\n        {\n          \"Type\": \"Chocolate\",\n          \"Amount\": 19\n        },\n        {\n          \"Type\": \"Ingredient\",\n          \"Amount\": [\n            \"Salt\",\n            \"100\"\n          ]\n        }\n      ]\n    }\n  }\n]\n","page":"Tutorial"}]
}
